name: Release Stage

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string

  workflow_dispatch:
    inputs:
      environment:
        description: "Deployment target (acceptance, uat or prod)"
        required: true
        default: "uat"

jobs:
  deploy:
    strategy:
      matrix:
        service: [backend, frontend]
    runs-on: ubuntu-latest

    steps:
      - name: Validate Required Secrets
        run: |
          if [[ -z "${{ secrets.AWS_REGION }}" || -z "${{ secrets.AWS_ACCESS_KEY_ID }}" || -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]]; then
            echo "Missing Secrets"
            exit 1
          fi

      - name: Determine Environment Input
        id: determine-environment
        run: |
          if [[ -n "${{ github.event.inputs.environment }}" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          elif [[ -n "${{ inputs.environment }}" ]]; then
            echo "environment=${{ inputs.environment }}" >> $GITHUB_ENV
          else
            echo "No environment input provided."
            exit 1
          fi
          echo "Final Environment: ${{ env.environment }}"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Generate Dockerrun.aws.json
        env:
          NAME: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ matrix.service == 'backend' && vars.ECR_REPOSITORY || vars.ECR_REPOSITORY_FRONTEND }}:latest
          CONTAINER_PORT: ${{ matrix.service == 'backend' && '3000' || '80' }}
        run: |
          cat > Dockerrun.aws.json << EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${NAME}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": ${CONTAINER_PORT},
                "HostPort": 80
              }
            ]
          }
          EOF

      - name: Set Environment Name
        id: set-environment
        run: |
          declare -A env_map=(
            ["uat_backend"]="${{ vars.EB_UAT_ENV }}"
            ["uat_frontend"]="${{ vars.EB_UAT_ENV_FRONTEND }}"
            ["acceptance_backend"]="${{ vars.EB_ACCEPTANCE_BACKEND }}"
            ["acceptance_frontend"]="${{ vars.EB_ACCEPTANCE_FRONTEND }}"
            ["prod_backend"]="${{ vars.EB_PROD_ENV }}"
            ["prod_frontend"]="${{ vars.EB_PROD_ENV_FRONTEND }}"
          )

          if [[ -z "${{ env.environment }}" ]]; then
            echo "missing environment variable."
            exit 1
          fi

          key="${{ env.environment }}_${{ matrix.service }}"
          environment_name=${env_map[$key]}

          if [[ -z "$environment_name" ]]; then
            echo "Unknown environment or service: $key"
            exit 1
          fi

          echo "environment_name=$environment_name" >> $GITHUB_ENV
          echo "Environment Name is set to: $environment_name"

      - name: Set Timestamp for Version Label
        id: set-timestamp
        run: echo "version_timestamp=$(date +%s)" >> $GITHUB_ENV

      - name: Log Environment Variables
        run: |
          echo "Environment: ${{ env.environment }}"
          echo "Service: ${{ matrix.service }}"
          echo "Environment Name: ${{ env.environment_name }}"
          echo "Version Timestamp: ${{ env.version_timestamp }}"

      - name: Deploy Backend to EB
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ matrix.service == 'backend' && vars.EB_APPLICATION_NAME || vars.EB_APPLICATION_NAME_FRONTEND }}
          environment_name: ${{ env.environment_name }}
          VERSION_LABEL: "release-${{ github.run_number }}-${{ env.environment }}-${{ env.version_timestamp }}"
          region: ${{ secrets.AWS_REGION }}
          deployment_package: Dockerrun.aws.json
