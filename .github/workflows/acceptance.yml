name: Acceptance Stage

on:
  push:
    branches:
      - 193-move-acceptance-test-stage-to-a-separate-file
  # workflow_dispatch:
  # schedule:
    # - cron: '*/5 * * * *'
jobs:
  check-images:
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.set-output.outputs.trigger }}
    env:
      MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
      OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
      NODE_ENV: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Check if backend image is published
        env:
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          IMAGES_UPDATED=false
          CURRENT_TIME=$(date +%s)
          LAST_UPDATED=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --region $AWS_REGION | jq -r '.imageDetails[0].imagePushedAt')
          LAST_UPDATED_EPOCH=$(date -d "$LAST_UPDATED" +%s)
          DIFF_MINUTES=$(( (CURRENT_TIME - LAST_UPDATED_EPOCH) / 60 ))
          if [ "$DIFF_MINUTES" -le 5 ]; then
            IMAGES_UPDATED=true
          fi
          echo "IMAGES_UPDATED=$IMAGES_UPDATED" >> $GITHUB_ENV
      
      - name: Check if frontend image is published
        if: env.IMAGES_UPDATED == 'false'
        env: 
          ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_FRONTEND }}
        run: |
          CURRENT_TIME=$(date +%s)
          LAST_UPDATED=$(aws ecr describe-images --repository-name $ECR_REPOSITORY --region $AWS_REGION | jq -r '.imageDetails[0].imagePushedAt')
          LAST_UPDATED_EPOCH=$(date -d "$LAST_UPDATED" +%s)
          DIFF_MINUTES=$(( (CURRENT_TIME - LAST_UPDATED_EPOCH) / 60 ))
          if [ "$DIFF_MINUTES" -le 7000 ]; then
            IMAGES_UPDATED=true
            echo "::set-output name=trigger::true"
            echo "deploy=true" >> $GITHUB_OUTPUT
          fi
          echo "IMAGES_UPDATED=$IMAGES_UPDATED" >> $GITHUB_ENV
      - name: No latest image found
        if: env.IMAGES_UPDATED == 'false'
        run: |
          exit 1

  trigger-uat-release:
    needs: check-images
    if: ${{ success() }}
    uses: ./.github/workflows/release.yml
    with:
      environment: acceptance
    secrets: inherit
  finish:
    needs: check-images
    if: ${{ failure() && steps.check-images.conclusion == 'failure' }}
    steps:
      - name: Exit with success
        run: |
          exit 0
  # acceptance-test:
  #   runs-on: ubuntu-latest
  #   needs: [trigger-uat-release]
  #   env:
  #     MONGO_DB_URI: ${{ secrets.MONGO_DB_URI }}
  #     OPENAI_KEY: ${{ secrets.OPENAI_KEY }}
  #     NODE_ENV: test
  #   steps:
  #     - name: Test env
  #       run: |
  #         echo $GITHUB_ENV

  #     - name: Install testing dependencies
  #       if: env.IMAGES_UPDATED == 'true'
  #       working-directory: ./system-test
  #       run: npm install

  #     - name: Install docker compose
  #       if: env.IMAGES_UPDATED == 'true'
  #       run: |
  #         curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  #         chmod +x /usr/local/bin/docker-compose

  #     - name: Login to AWS ECR
  #       if: env.IMAGES_UPDATED == 'true'
  #       uses: aws-actions/amazon-ecr-login@v1
  #       env:
  #         AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         AWS_REGION: ${{ secrets.AWS_REGION }}

  #     - name: Run docker-compose
  #       if: env.IMAGES_UPDATED == 'true'
  #       working-directory: ./system-test
  #       env:
  #         ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  #         AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  #         AWS_REGION: ${{ secrets.AWS_REGION }}
  #       run: |
  #         docker-compose up -d

  #     - name: Run acceptance tests
  #       if: env.IMAGES_UPDATED == 'true'
  #       working-directory: ./system-test
  #       run: |
  #         npm run test:acceptance

  #     - name: Stop docker-compose
  #       if: env.IMAGES_UPDATED == 'true'
  #       working-directory: ./system-test
  #       run: |
  #         docker-compose down
